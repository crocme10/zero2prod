name: CI / CD Prechecks

# To automatically trigger the workflow
on:
  # NB: this differs from the book's project!
  # These settings allow us to run this specific CI pipeline for PRs against
  # this specific branch (a.k.a. book chapter).
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  SQLX_VERSION: 0.6.3
  SQLX_FEATURES: "rustls,postgres"
  ZERO2PROD_PROFILE: "github"

# A workflow run is made up of one or more jobs, which run in parallel by default
# Each job runs in a runner environment specified by runs-on
jobs:
  # Unique identifier of our job (`job_id`)
  test:
    # Sets the name `Test` for the job, which is displayed in the GitHub UI
    name: Test
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Service containers to run with the `test` container job
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:15
        # Environment variables scoped only for the `postgres` element
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        # When you map ports using the ports keyword, GitHub uses the --publish command to
        # publish the containerâ€™s ports to the Docker host
        # Opens tcp port 5432 on the host and service container
        ports:
          - 5432:5432
    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install the Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      - name: Rust Cache Action
        uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}
      - name: Install sqlx-cli
        run:
          cargo install sqlx-cli
          --version=${{ env.SQLX_VERSION }}
          --features ${{ env.SQLX_FEATURES }}
          --no-default-features
          --locked
          # The --locked flag can be used to force Cargo to use the packaged
          # Cargo.lock file if it is available.
          # This may be useful for ensuring reproducible builds, to use the exact same set of
          #   dependencies that were available when the package was published.
          # It may also be useful if a newer version of a dependency is published that no
          #   longer builds on your system, or has other problems

      - name: Migrate database
        run: |
          sudo apt-get update && sudo apt-get install libpq-dev -y
          cd zero2prod
          SKIP_DOCKER=true cargo xtask postgres
      - name: Check sqlx-data.json up to date.
        run: |
          sudo apt-get update && sudo apt-get install libpq-dev -y
          cd zero2prod
          SKIP_DOCKER=true cargo xtask postgres
      - name: Run unit tests
        run: cargo test --bins --lib
      # We use the specific 'github' profile, which assigns, for example, the port 5432.
      # (See config/database/github.toml)
      - name: Run integration tests
        run: cargo test --test integration

  # `fmt` container job
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          # Specific to dtolnay/rust-toolchain: Comma-separated string of additional components to install
          components: rustfmt
      - name: Enforce formatting
        run: cargo fmt --check

  # `clippy` container job
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
        with:
          key: sqlx-${{ env.SQLX_VERSION }}
      - name: Install sqlx-cli
        run:
          cargo install sqlx-cli --version=${{ env.SQLX_VERSION }} --features
          ${{ env.SQLX_FEATURES }} --no-default-features --locked
      - name: Migrate database
        run: |
          sudo apt-get update && sudo apt-get install libpq-dev -y
          cd zero2prod
          SKIP_DOCKER=true cargo xtask postgres
      - name: Check sqlx-data.json up to date.
        run: |
          sudo apt-get update && sudo apt-get install libpq-dev -y
          cd zero2prod
          SKIP_DOCKER=true cargo xtask postgres
      - name: Linting
        run: cargo clippy -- -D warnings

